import json
import logging

import requests
from django.conf import settings
from django.core.mail import EmailMultiAlternatives
from django.http import JsonResponse
from django.template.loader import render_to_string

from app_newsletter.models import Subscriber
from .forms import ClientCallBackForm

logger = logging.getLogger(__name__)
from django.db import transaction

from django.views.decorators.http import require_http_methods
from django_ratelimit.decorators import ratelimit


@require_http_methods(["POST"])
@ratelimit(key='ip', rate='1/m', block=True)
def ajax_callback_view(request):
    logger.info("ajax_callback_view –≤—ã–∑–≤–∞–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type
    if request.content_type != 'application/json':
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type: {request.content_type}")
        return JsonResponse(
            {"success": False, "errors": {"__all__": ["–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type, –æ–∂–∏–¥–∞–µ—Ç—Å—è application/json"]}},
            status=415
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    max_body_size = 1024  # 1KB
    body_length = len(request.body)
    logger.debug(f"–†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {body_length} –±–∞–π—Ç")
    if body_length > max_body_size:
        logger.warning(f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {body_length} –±–∞–π—Ç")
        return JsonResponse(
            {"success": False, "errors": {"__all__": ["–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞"]}},
            status=413
        )

    # –ü–∞—Ä—Å–∏–Ω–≥ JSON
    try:
        data = json.loads(request.body.decode('utf-8'))
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        max_field_length = 100
        for field in ['name', 'phone', 'email']:
            if field in data and len(data[field]) > max_field_length:
                logger.warning(f"–ü–æ–ª–µ '{field}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(data[field])} —Å–∏–º–≤–æ–ª–æ–≤")
                return JsonResponse(
                    {"success": False, "errors": {field: ["–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"]}},
                    status=400
                )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if 'email' in data and '@' not in data['email']:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: {data['email']}")
            return JsonResponse(
                {"success": False, "errors": {"email": ["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"]}},
                status=400
            )

    except (json.JSONDecodeError, UnicodeDecodeError) as e:
        logger.warning(f"Invalid request data from {request.META.get('REMOTE_ADDR')}: {str(e)}", exc_info=True)
        return JsonResponse(
            {"success": False, "errors": {"__all__": ["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"]}},
            status=400,
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
    form = ClientCallBackForm(data)
    logger.info("–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞")

    if form.is_valid():
        logger.info("–§–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        try:
            call_request = form.save(commit=False)

            # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
            call_request.name = clean_string(form.cleaned_data.get('name', ''))
            call_request.phone = clean_phone(form.cleaned_data.get('phone', ''))
            call_request.email = form.cleaned_data.get('email', '').lower().strip()
            call_request.save()
            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ID={call_request.id}")

            # –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º
            try:
                with transaction.atomic():
                    subscriber, created = Subscriber.objects.get_or_create(
                        email=call_request.email,
                        defaults={'is_active': True}
                    )
                    logger.info(f"–ü–æ–¥–ø–∏—Å—á–∏–∫ {'—Å–æ–∑–¥–∞–Ω' if created else '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}: {call_request.email}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º: {str(e)}", exc_info=True)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ email
            try:
                context = {
                    "user_name": call_request.name,
                    "phone": call_request.phone,
                }

                plain_message = render_to_string("emails/client_call_back.txt", context)
                html_message = render_to_string("emails/client_call_back.html", context)

                email = EmailMultiAlternatives(
                    subject="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç Angel Dress",
                    body=plain_message,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    to=[call_request.email],
                    headers={'X-Entity-Ref-ID': str(call_request.id)},
                )
                email.attach_alternative(html_message, "text/html")
                email.send(fail_silently=False)
                logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {call_request.email}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email: {str(e)}", exc_info=True)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            try:
                telegram_token = settings.TELEGRAM_BOT_TOKEN
                telegram_chat_id = settings.TELEGRAM_CHAT_ID

                message_text = (
                    f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫!\n\n"
                    f"üë§ –ò–º—è: {call_request.name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {call_request.phone}\n"
                    f"üìß Email: {call_request.email}\n"
                    f"üîó ID: {call_request.id}"
                )

                if not str(telegram_chat_id).startswith('-100'):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id –¥–ª—è Telegram")

                send_url = f"https://api.telegram.org/bot {telegram_token}/sendMessage"

                with requests.Session() as session:
                    session.timeout = 5
                    response = session.post(
                        send_url,
                        json={
                            "chat_id": telegram_chat_id,
                            "text": message_text,
                            "disable_web_page_preview": True,
                        },
                        timeout=5
                    )
                    response.raise_for_status()

                logger.info(f"Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID={call_request.id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {str(e)}", exc_info=True)

            return JsonResponse({"success": True}, headers={'X-Frame-Options': 'DENY'})

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True)
            return JsonResponse(
                {"success": False, "errors": {"__all__": ["–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"]}},
                status=500,
                headers={'X-Content-Type-Options': 'nosniff'}
            )
    else:
        logger.warning(f"–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {form.errors}")
        return JsonResponse(
            {"success": False, "errors": form.errors},
            status=400,
            headers={'Cache-Control': 'no-store'}
        )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def clean_string(value):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    import re
    return re.sub(r'[^\w\s\-@\.]', '', value.strip())


def clean_phone(phone):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    import re
    return re.sub(r'[^\d+]', '', phone.strip())

